		Illustrative Introduction to Package

To use this package, you need to know a little about Matlab, and also 
understand the basic processes involved in X-ray image analysis. This 
article hopes to walk you through the main features of the package. If 
you find it unclear you may find someone showing you it will make it much 
clearer. If you don't like all the waffle there is a quick reference 
section.

In essence, X-ray analysis requires at least the following proceedures.


* Calibration and Initialization
	- This is discussed in Sections One and Section Four and a Half and 
introduces the commands, startup, circle and spec_to_phos.

* Loading images into Matlab
	- This is discussed in Section Two with the command, slurp.

* Displaying, examining and Masking images
	- This is discussed in Section Three, Section Four and uses the 
commands show, mask and roi.

* Integrating, Plotting Integrals and derived quantities
	- This is done in Section Five and Five and a Half and uses the 
commands, integrater, guinier, kratky, sintegrater, gyration, etc.

Hopefully an interactive Matlab walkthough will be done for the real 
image analysis package, but this is a start.

 
*************************
Step One - Starting

Having fired up Matlab, use "cd" and "ls" to move into the directory with 
this file. The routines in this package need to know certain information. 
They want to know what image intensity and distortion correction files to 
use, what masks to use when displaying images and integrating images, the 
beam position, the X-ray wavelength, the distance from detector to sample 
and sundry information. These facts are stored in global variables. You do 
not want to use the same variable names as these or the routines will get 
confused.

They are,

Intensity_Correct, X_Distortion_Map, Y_Distortion_Map 
		- Arrays of singles used by correct.m
X_cen, Y_cen 	- Location of beam. (vertical)
Spec_to_Phos 	- Distance from specimen to phosphor in pixels.
X_Lambda 	- Wavelength of X-rays in Angstrom.
MaskD, MaskI 	- Default masks used for display and integrating.

You can check on them at any time with the MATLAB command whos.

They are initialized by the function startup. If you've never used these 
routines before, go in Matlab to the directory containing this Readme 
document. If you just type

>> startup;

Matlab will execute this script, globalize all the above variables and 
initialize some of them. You are free to change the values of any of them 
at any time. For example, if startup.m does not set X_cen or Y_cen, the 
beam centre and you know it is 300,105.3 you can type,

>> X_cen = 300;
>> Y_cen = 105.3;

and that is set. However, you probably want to edit startup to initialize 
at least some of them, if not all of them.

Here is what they mean.

Intensity_Correct, X_Distortion_Map, Y_Distortion_Map are image files the 
same size as your images used to correct for CCD distortions. These 
variables are specific to a particular detector. For example, the command
>> load Correction_1KBin2.mat
will initialize them for the 1K detector using Bin2 whereas,

>> load Correction_PM.mat
will initialize them for the PM detector.

MaskD and MaskI are variables the same dimension as the correction file. 

To initialize them you can just put in startup,
>> MaskD=mask; MaskI=mask;
which sets them to one.

If you know X_Lambda, Spec_to_Phos, X_cen or Y_cen you should enter them, 
but everything will work even if you don't.

 
**********************************************************************
Step Two - Loading images

We want to slurp images off disk. Assuming you are in the right directory 
and your images were made using TV6's ima command they should be saved in 
sequence. Let's suppose images ernie0.tif and ernie1.tif are backgrounds, 
and ernie2.tif, ernie4.tif and ernie5.tif are images of the same object. 
A 1 joule photon hit the detector during ernie3.tif so there is no useful 
information in it. Normal usage of slurp would be,

x=slurp('ernie',[2,4:5],[0:1]);

x would then be a background, CCD and flux corrected average of ernie2, 
ernie4 and ernie5. We'll explain the nature of each of those corrections 
in a second. First up, let's use slurp piecemeal to illustrate the steps.

a=slurp('ernie',2);

would do the following things. First, it loads ernie2.tif. Next, it 
corrects for the CCD intensity and distortion. Finally, it places the 
result in a. This is the simplest possible use of slurp. In essence, a is 
the average of ernie2.tif.

The command,

b=slurp('ernie',[2,4,5]);

is a little more complicated. Slurp loads images 2,4 and 5. It does take 
the average, but rejects pixels from each image which have been zingered. 
You can do this by hand using the function dezing. Taking this average, 
it does the same CCD intensity and distortion correction. The result is 
returned in b. 

You could do the same thing to the backgrounds with,

c=slurp('ernie',[0,1]);

Then, if you did the operation,

d=b-c;

you'd have the signal of ernie2.tif, ernie4.tif and ernie5.tif minus the 
background.

However, there is one more thing to correct for. The flux of X-rays that 
made up images 2,4 and 5 may be different from other images on disk. If 
you used TV6 1K, the flux of X-rays is recorded in the tif tags. You can 
get the average flux for a set of images using average_tag.m. For 
example, average_tag('ernie',[4,5]) will give you the average flux of 
X-rays in ernie4.tif and ernie5.tif. You could normalize the flux of d 
through the command,

e = d / (average_tag('ernie',[2,4:5]) ; average_tag('ernie',[1,0]));

This is identical to the command,

e = slurp('ernie',[5,2,4],[1,0]);

That's the basics of getting images dezingered, CCD corrected, averaged, 
background subtracted and flux normalized.

 
*************************************************************************
Step Three - Image Display

The command, show.m does this easily. Typing,

show(e)

will display e in a new figure. A number of features are important. 
First, the least colour in the image will be the minimum value of e and 
the brightest colour in the image will be the maximum value of e. Next, 
show(e) returns those two values. Finally, only those pixels in e for 
which the global variable, MaskD, is one, will be displayed. We'll talk 
about masking in the next step but if you are curious you can look at the 
mask using,

show(MaskD,[0,1])

which will display the MaskD. If MaskD is not all on, parts of the image 
will not be displaed. You can quickly reset it with,

MaskD = mask;

but we'll come back to that in the next section.

You can set the colour range of show with,

show(e,[ 0.01, 0.06]);

This will set the lower range of the image at pixels of brightness 0.01 
and the upper range at 0.06. This is a handy feature for showing up 
subtle changes in intensity.

Next, you may want to examine various regions of the image to measure the 
mean, maximum and minimum values within them. The function, roi.m lets you 
do this and uses a very similar format to show. This lets you pick out 
polygons on an image and get the mean, maximum and minimum within that 
region. Eg,

roi(e);

displays e, and then for each polygon picked out the mean, maximum and 
minimum value are returned. You can use it a bit more trickily,

roi(e, [-0.1, 3.2]);

sets the range for the display just as for show. While,

[mean, maximum,minimum]=roi(e);

works the same, but at the end you have the values of mean, maximum and 
minimum saved in the vectors mean, maximum and minimum. While roi.m does 
tell you how to escape, it doesn't advertise that particularly well. Just 
do a right mouse click without picking a polygon and you are home free.

Just a final quick trick. Suppose you want to see a log plot. A quick, 
ugly way to do this is,

f=log(e); show(f);

 

************************************************************************* 

Step Four - Masking

Often you want to pick, view, integrate or do something to only a 
fraction of the picture. A fraction of the picture can be selected with a 
mask. The basic command is mask. The standard syntax is,

mymask = mask(e);

Mask is an interactive function. At the beginning, mymask includes the 
whole image. Mymask displays the image and asks you to pick out a 
polygonal region using the left mouse button. Each point you click on 
becomes a vertex and after two vertices are fixed the polygon is closed. 
When you've marked all the vertices you want, just right-click the mouse. 
Only points where you have clicked the left mouse button become vertices. 
Mask does not mind if you pick points off screen, or if you have 
intersections within the polygon.

Once the polygon is picked, mask will ask you what you want to do with 
the polygon. The options are,

Include data (i)
Exclude data (e)
Reject Polygon (r)
Negate Mask (n)
Quit (q)

If you pick (i), mask will remove all points within the polygon you 
selected along with all the other points that have been removed to date 
by previous efforts. If you pick (e), mask will include all the points 
within the polygon you selected, even if they were removed on a previous 
attempt. If you reject the polygon, mask will just give you a fresh 
chance to pick out one you do want. If you negate the mask, all the 
points that were included will be excluded, and vice versa. Finally, if 
you quit, mask will return the current image mask to mymask. It?s a 
little counter-intuitive, but it works.

So, the basic process is to pick out polygons, and then either include or 
exclude the data in them. At the end, mymask will be an array of 0s and 
1s. The 0s are excluded pixels and the 1s are included pixels.

A couple of points to note. Firstly, the negate function is very handy. 
Suppose you want to mark out a thin slice for an integral. Then, you 
first (n) to exclude everything. Then, mark out your thin slice and (i) 
it. Voila!

Secondly, mask can be used to return a fully inclusive mask (ie. all 1s) 
without pressing a button. Just type,

mymask = mask;

Finally, you can set the range on mask?s display, just like you did on 
show. The call then becomes,

mymask = mask(e,[0.03,0.2]);

Once you've got your mask, you will want to do different things with it. 
You may well want to save your mask. This is easily done with,

save First_Mask.mat mymask

This saves the image, mymask in the file ?First_Mask.mat?. You get it 
back with the load command.

Next, you may want to use your mask when using show. Show?s mask is 
called MaskD and can be set to the value in a mask, mymask, say, with,

MaskD=mymask;

Or, you may want to use it to integrate. We haven?t got that far yet, but 
the integrate command uses MaskI as it?s mask. You just set it with,

MaskI = mymask;

Anyway, that's far too much on masks.

 
************************************************************************
Step Four and a Half - Calibration

There isn't a pretty calibration method in MATLAB yet, but this one works 
for laminar calibrants.

First, you need the image centre. This is where the circle command comes 
in. Show the calibration image with the command,

show(calibration);

Circle.m will plot circles on the screen to let you estimate by eye where 
the image centre is. You place the centre of the circle using the left mouse button. You put a point on the perimeter using the middle mouse button. You quit by pressing the right mouse button. Each time you update the circle centre, circle.m prints out the circle centre. On leaving, it gives you all the values you tried in a single vector of the form, x,y. If your beam centre is off screen, that is no problem. Just expand the figure so there is lot?s of grey space off screen. By clicking outside the image, you can make either x or y negative. So, to do this all you need is,

v= circle;

and v will come back with a column of x values and a column of y values.

This should give you the centre of the beam, X_cen and Y_cen. Now you 
need to set them. You do this with,

X_cen = 314; Y_cen = 102;

if the beam were centred on 314, 102 say.

Next, you need to eliminate the old calibration with the command,

new_calibration;

Indeed, it's worth noting that if at any time you want to go back to 
uncalibrated integrations, you just execute new_calibration. Next, you 
want to integrate the image (see section five for details). This will 
give you a scattering curve from which you can pick of the diffraction 
ring maxima. For a laminar calibrant (like silver stearate) with 
d-spacing, d (in Angstroms), where the m-th diffraction ring has a radii 
of, r_m, in pixels, Spec_to_Phos would be given by,

Spec_to_Phos = r_m / tan( 2 arcsin( m * X_Lambda/ (2d) ) )

This is given in the function, spec_to_phos.m. You call it with,

spec_to_phos([1,3],[ 50,148],48.85, 1.54)

where 1.54 is the x-ray wavelenth in Angstroms, 48.85 is the d-spacing of 
silver stearate in Angstroms and 50 and 148 are the radii in pixels of 
rings 1 and 3 of the scattering pattern. For help, just type help 
spec_to_phos.  There's now a function for finding the peak locations 
called Find_Peak.m.

After that, you can decide on X_Lambda, Spec_to_Phos, X_cen and Y_cen 
somehow and set them before you go off integrating willy nilly.

 
**********************************************************************
Step Five - Integrating

Integration is the trickiest thing we've done so far and it has a lot of 
global variables - X_cen, Y_cen, Spec_to_Phos, X_Lambda and MaskI. 
Integrater.m wants to integrate your image using X_cen, Y_cen as the 
centre of the integral, only include points for which MaskI is one and 
finally convert distances on the screen into reciprocal Angstrom using 
Spec_to_Phos and X_Lambda. What happens if these aren?t set.

If you don-t set X_cen and Y_cen, integrater will give you a warning and 
assume the beam is in the middle of the screen. If you don't set 
Spec_to_Phos and X_Lambda, integrater again warns you and returns 
scattering angles in pixels, rather than in reciprocal Angstroms. If 
MaskI is not as you?d like it, the wrong bits of the image will go in and 
out.

MaskI is the only variable you should be playing with after you-ve 
calibrated the image. If you want to include the whole image in your 
integral, the command,

MaskI = mask;

will suffice. If you want to make up a mask, you can do it using the 
standard masking proceedure in Step Four. If you've been using a mask and 
forgotten what it looks like, something along the lines of,

temp=MaskD;

MaskD=MaskI; % Now the display mask is the same as the integate

show(imag);

maskD=temp; % Restore the original display mask.

will show you what your mask looks like on image, imag.

Let's say you;ve picked the points you want to have in and out by setting 
MaskI. What you want to do is integrate. This is easy. Just type,

Ival=integrater(imag);

and a radial, per pixel normalized integral centred on X_cen, Y_cen 
including all the pixels in MaskI will be placed in Ival. Ival(:,1) are 
the q-values and Ival(:,2) are the intensities. Plotter(Ival,'m') will do 
the trick if you want to look at it in magenta, say.

You can turn per pixel normalization off with,

Ival = integrater(imag,'radial');

That's it. Nothing more to it. You move the centre around with X_cen and 
Y_cen. You can cut parts of the image in or out of the integral with 
MaskI. As for Spec_to_Phos and X_Lambda, they should be constant for a 
given beam configuration.

 
**************************************************************************
Step Five and a Third - Guinier and Kratky Plots

There is nothing a small angle scatterer likes better than to plot 
Guinier and Kratky plots. Two quick and dirty routines exist to help with 
this. The first is guinier.m.

Let's assume you just used integrate.m to make q and Ival hold your 
integral. Then,

G = guinier(Ival);

will put the log of Ival(:,2) into G(:,2) and q squared into G(:,1). You 
can then plot this with,

plotter(G);

If you want to fit a region of the curve with the Guinier approximation 
then just use gyration.m.

Similarly, you might want to use kratky.m to make Kratky plots. This is 
done with,

K = kratky(Ival); plotter(K)

is all you need.

 
*******************************************************************
Step Five and Two Thirds - sintegrater.m

Historically, TV6 has defined an integral using a bowtie shaped 
integration region. Out of convenience, one side of the bowtie was 
assigned positive radii while the other was given negative radii. 
sintegrater.m works a lot like integrate.m but supports negative radii. 
You just go,

Ival = sintegrater(imag);

or Ival = sintegrater(imag,'radial');

First, it needs to figure out the angle along which the bowtie points. If 
each point in the bowtie (x_i, y_i) is summed up, then theta, the angle 
of the bowtie is given by,

theta = 0.5 * atan2 ( 2.0*sum(x_i * y_i) , sum(x_i*x_i ? y_i*y_i));
 
Next, it breaks the mask into two separate pieces. The positive radii 
piece and the negative radii piece. Finally, it integrates each piece and 
puts the answers back together. You would only use this function if you 
think for some reason the left and right hand side of your bowtie might 
give different answers.
